#! /bin/bash

site_name=$1

checkFolder () {
    folder_site=$1
    if [[ -d $folder_site ]];
        then
            return
    else
        echo -e "\nThe folder $1 doesn't exists, does the site you want to configure really exist?.\n"
        exit
    fi
}

checkUser () {
    user=$1
    getent passwd $user > /dev/null
    if [[ $? -eq 0 ]];
        then
            echo -e "\nSite user owner already exist, has the site already been customized?\n"
            exit
    else
        echo -e "\nAdding user and group: \"$user\" to system.\n"
    fi
}

createUser () {
   user=$1
   useradd -r -s /sbin/nologin $user
}

createLogDir () {
    dir_name=$1
    mkdir /var/log/nginx/$site_name/ > /dev/null
    chown $dir_name:$dir_name /var/log/nginx/$site_name/
    chmod 660 /var/log/nginx/$site_name/
    mkdir /var/log/php-fpm/$site_name/ > /dev/null
    chown $dir_name:$dir_name /var/log/php-fpm/$site_name/
    chmod 660 /var/log/php-fpm/$site_name/
}

createNginxConfig () {
    site_name=$1
    cat /etc/nginx/conf.d/template.conf__  > /etc/nginx/conf.d/$site_name.conf
    sed -i 's/{HOSTING}/'"$site_name"'/g' /etc/nginx/conf.d/$site_name.conf
    if [[ $? -ne 0 ]];
        then
            echo -e "\nSomething went wrong with template or config file.\n Check /etc/nginx/conf.d folder.\n"
            exit
    else
        echo -e "\nNginx tailored config file created successfully.\n"
    fi
}

createFpmConfig () {
    site_name=$1
    cat /etc/php-fpm.d/template.conf__  > /etc/php-fpm.d/$site_name.conf
    sed -i 's/{HOSTING}/'"$site_name"'/g' /etc/php-fpm.d/$site_name.conf
    if [[ $? -ne 0  ]];
        then
            echo -e "\nSomething went wrong with template or config file.\\n Check /etc/php-fpm.d folder.\n"
            exit
    else
        echo -e "\nPHP-FPM tailored config file created successfully.\n"
    fi
}

nginxSyntaxValidator () {
    site_name=$1
    regex=successful$
    #result=`nginx -t -c /etc/nginx/conf.d/$site_name 2>&1`
    result=`nginx -t -c /etc/nginx/nginx.conf 2>&1`
    if [[ $result =~ $regex ]];
        then
            echo -e "\nNginx syntax successfully verified.\n"
    else
        echo -e "\nSome errors have been found in NGINX syntax:\n\n$result\n"
    fi
}

phpSyntaxValidator () {
    site_name=$1
    regex=successful$
    # only for lines that contains number: regex_err="(?i)(\W|^)(Unable)[[:space:]](to)[[:space:]](include)(\W|$)"
    regex_err=".(?i)(\W|^)ERROR(\W|$)"
    result=`php-fpm -t 2>&1`
    if [[ $result =~ $regex ]];
        then
            echo -e "\nPHP-FPM syntax successfully verified.\n"
    else
        echo -e "\nSome errors have been found in PHP-FPM syntax:\n\n$result\n"
    fi
}

updateMysqlUser () {
    new_user=$1
    old_db_user=`cat ./$1/html/wp-config.php | grep DB_USER | cut -d \' -f 4`
    wp_db=`cat ./$1/html/wp-config.php | grep DB_NAME | cut -d \' -f 4`
    passwd=""

    #Mysql user max 16 characters, if greater than 16 -> crop it
    if [[ ${#new_user} -gt 16 ]];
        then
            new_user=`echo $new_user | cut -c1-15`
    fi

    #Set root passwd manually or ask for it?
    r_passwd=""
    #read -s r_passwd
    echo -e "Set user \"$new_user\"'s mysql password:\n"
    read -s passwd

    mysql -uroot -p$r_passwd -e "CREATE USER '${new_user}'@localhost IDENTIFIED BY '${passwd}';"
    mysql -uroot -p$r_passwd -e "GRANT ALL PRIVILEGES ON ${wp_db}.* TO '${new_user}'@'localhost';"
    mysql -uroot -p$r_passwd -e "FLUSH PRIVILEGES;"

    sed -i "/DB_USER/s/'[^']*'/'${new_user}'/2" ./$1/html/wp-config.php
    sed -i "/DB_PASSWORD/s/'[^']*'/'${passwd}'/2" ./$1/html/wp-config.php
}

setFolderPermission () {
    root_path=$1
    fpm_user=$1

    chown $fpm_user:$fpm_user -R ./$root_path/
    find ./$root_path/html -type d -exec chmod 755 {} \;
    find ./$root_path/html -type f -exec chmod 644 {} \;
    chmod 600 ./$root_path/html/wp-config.php
}

# MAIN ------------------------------------

checkFolder $site_name

checkUser $site_name

createUser $site_name

createLogDir $site_name

createNginxConfig $site_name

createFpmConfig $site_name

nginxSyntaxValidator $site_name

phpSyntaxValidator $site_name

updateMysqlUser $site_name

setFolderPermission $site_name

###### 1billion test, then, uncoment next line

# systemctl reload php-fpm;systemctl reload nginx
